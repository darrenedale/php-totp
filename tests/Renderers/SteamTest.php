<?php
/*
 * Copyright 2022 Darren Edale
 *
 * This file is part of the php-totp package.
 *
 * php-totp is free software: you can redistribute it and/or modify
 * it under the terms of the Apache License v2.0.
 *
 * php-totp is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Apache License for more details.
 *
 * You should have received a copy of the Apache License v2.0
 * along with php-totp. If not, see <http://www.apache.org/licenses/>.
 */

declare(strict_types=1);

namespace Equit\Totp\Tests\Renderers;

use Equit\Totp\Renderers\Steam;
use Equit\Totp\Tests\Framework\TestCase;

/**
 * Test the Steam password renderer.
 */
class SteamTest extends TestCase
{
    /**
     * Data provider for testRender().
     *
     * @return array[] The test data.
     */
    public function dataForTestRender(): array
    {
        return [
            // max 31-bit unsigned int
            ["\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff", "WXPBQ",],

            // min 31-bit unsigned int (i.e. 0)
            ["\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", "22222",],

            // offset = 0, padding with 5 0s
            ["\x00\x00\x00\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00", "32222",],

            // padding, increasing offset, shifting hex digit 1 in 31-bit BE unsigned int (i.e. 0x00000001, 0x00000010,
            // 0x00000011, 0x00000100, 0x00000101, ... 0x00001111)
            ["\xff\x00\x00\x00\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01", "32222",],
            ["\xff\xff\x00\x00\x00\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02", "M2222",],
            ["\xff\xff\xff\x00\x00\x00\x11\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03", "N2222",],
            ["\xff\xff\xff\xff\x00\x00\x01\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x04", "VC222",],
            ["\xff\xff\xff\xff\xff\x00\x00\x01\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x05", "WC222",],
            ["\xff\xff\xff\xff\xff\xff\x00\x00\x01\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x06", "GD222",],
            ["\xff\xff\xff\xff\xff\xff\xff\x00\x00\x01\x11\xff\xff\xff\xff\xff\xff\xff\xff\x07", "HD222",],
            ["\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x10\x00\xff\xff\xff\xff\xff\xff\xff\x08", "J3822",],
            ["\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x10\x01\xff\xff\xff\xff\xff\xff\x09", "K3822",],
            ["\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x10\x10\xff\xff\xff\xff\xff\x0a", "64822",],
            ["\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x10\x11\xff\xff\xff\xff\x0b", "74822",],
            ["\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x11\x00\xff\xff\xff\x0c", "DF822",],
            ["\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x11\x01\xff\xff\x0d", "FF822",],
            ["\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x11\x10\xff\x0e", "2G822",],
            ["\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x11\x11\x0f", "3G822",],

            // test offset masking at byte 19 - all should produce an offset of 8
            ["\x43\x82\x1f\x68\xf2\xda\x10\xbc\x01\x02\x03\x04\xa7\x1c\xff\xef\x01\xba\xd6\x08", "GD32F",],
            ["\x43\x82\x1f\x68\xf2\xda\x10\xbc\x01\x02\x03\x04\xa7\x1c\xff\xef\x01\xba\xd6\x18", "GD32F",],
            ["\x43\x82\x1f\x68\xf2\xda\x10\xbc\x01\x02\x03\x04\xa7\x1c\xff\xef\x01\xba\xd6\x28", "GD32F",],
            ["\x43\x82\x1f\x68\xf2\xda\x10\xbc\x01\x02\x03\x04\xa7\x1c\xff\xef\x01\xba\xd6\x38", "GD32F",],
            ["\x43\x82\x1f\x68\xf2\xda\x10\xbc\x01\x02\x03\x04\xa7\x1c\xff\xef\x01\xba\xd6\x48", "GD32F",],
            ["\x43\x82\x1f\x68\xf2\xda\x10\xbc\x01\x02\x03\x04\xa7\x1c\xff\xef\x01\xba\xd6\x58", "GD32F",],
            ["\x43\x82\x1f\x68\xf2\xda\x10\xbc\x01\x02\x03\x04\xa7\x1c\xff\xef\x01\xba\xd6\x68", "GD32F",],
            ["\x43\x82\x1f\x68\xf2\xda\x10\xbc\x01\x02\x03\x04\xa7\x1c\xff\xef\x01\xba\xd6\x78", "GD32F",],
            ["\x43\x82\x1f\x68\xf2\xda\x10\xbc\x01\x02\x03\x04\xa7\x1c\xff\xef\x01\xba\xd6\x88", "GD32F",],
            ["\x43\x82\x1f\x68\xf2\xda\x10\xbc\x01\x02\x03\x04\xa7\x1c\xff\xef\x01\xba\xd6\x98", "GD32F",],
            ["\x43\x82\x1f\x68\xf2\xda\x10\xbc\x01\x02\x03\x04\xa7\x1c\xff\xef\x01\xba\xd6\xa8", "GD32F",],
            ["\x43\x82\x1f\x68\xf2\xda\x10\xbc\x01\x02\x03\x04\xa7\x1c\xff\xef\x01\xba\xd6\xb8", "GD32F",],
            ["\x43\x82\x1f\x68\xf2\xda\x10\xbc\x01\x02\x03\x04\xa7\x1c\xff\xef\x01\xba\xd6\xc8", "GD32F",],
            ["\x43\x82\x1f\x68\xf2\xda\x10\xbc\x01\x02\x03\x04\xa7\x1c\xff\xef\x01\xba\xd6\xd8", "GD32F",],
            ["\x43\x82\x1f\x68\xf2\xda\x10\xbc\x01\x02\x03\x04\xa7\x1c\xff\xef\x01\xba\xd6\xe8", "GD32F",],
            ["\x43\x82\x1f\x68\xf2\xda\x10\xbc\x01\x02\x03\x04\xa7\x1c\xff\xef\x01\xba\xd6\xf8", "GD32F",],

            // some semi-random HMACs
            ["\xf9\xb7\x19\xde\x79\x0a\xae\xcb\x3d\x0e\x9b\xc7\xcc\xfd\xec\x95\xe8\xaa\x42\x26", "V68Y3"],
            ["\xcc\x3b\xa8\xdc\xba\xca\x2d\xac\xa4\xd0\x64\x48\x05\x59\x71\xc8\xdb\x38\xbb\xb0", "VNFRM",],
            ["\xe7\xf2\xec\xd9\x16\x90\xec\x1c\x48\xd8\xec\x07\x60\x0d\x79\x78\x10\x4a\x24\x89", "8HPMJ",],
            ["\x40\x7f\x7e\x5d\xd8\x1d\xd0\x1c\x77\x1a\x4b\xa5\x34\x3d\xbf\x7d\xc6\x5b\xa2\x12", "Y4JCF",],
			["\x67\xd6\x23\x24\x09\x97\xa7\x67\x3c\xe2\xf0\x00\x9e\x65\x20\x74\x72\xd1\xb6\xd5", "MMWDD",],
			["\x06\xa7\xd6\xe9\xb0\xb6\x55\xbe\x43\xb7\x1c\x44\x2a\x12\xc7\xa1\xc3\x2d\xc3\x22", "M3WVP",],
			["\x80\xd3\x70\x9d\x20\x49\x90\x7c\x84\x6b\x2a\x6d\xd0\x61\x4e\x36\xd7\xe1\x96\x02", "TXQF2",],
			["\xee\x99\xc8\x73\xf7\xd1\xf2\x94\x99\xf3\x35\xcd\xe0\x2e\x57\x58\x0c\x61\x65\x10", "357J6",],
			["\x8e\xf5\xec\xc7\x9a\x13\x40\x25\x9c\xe4\xb8\xfb\xaa\x5a\x26\xfe\x3e\x3d\xc0\x4a", "XNB3G",],
			["\x46\x69\xa3\x82\x8f\xc1\xbc\xc2\x68\x48\xd4\xaa\x92\xa8\x0f\x4b\x89\x5a\xf0\xcb", "79325",],
			["\xd6\x1a\xf4\xfe\xf0\x21\x2d\x58\x82\x5a\xde\x71\xb4\xdc\xa1\x53\xdd\x17\x71\x00", "JX28K",],
//			["", "",],
        ];
    }

    /**
     * Test the Steam renderer's render() method.
     *
     * @dataProvider dataForTestRender
     *
     * @param string $hmac The HMAC to use to render the password.
     * @param string $expectedPassword The password the renderer is expected to produce.
     */
    public function testRender(string $hmac, string $expectedPassword)
    {
        $renderer = new Steam();
        $actualPassword = $renderer->render($hmac);
        $this->assertEquals(5, strlen($actualPassword), "Steam renderer produced a password of " . strlen($actualPassword) . " characters.");
        $this->assertStringContainsOnly(Steam::ValidCharacters, $actualPassword, "Steam renderer produced a password with invalid characters.");
        $this->assertEquals($expectedPassword, $actualPassword, "Steam renderer produced an incorrect password.");
    }
}
